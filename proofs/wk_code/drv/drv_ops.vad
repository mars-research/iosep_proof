include "drv_ops_impl.vad"
include "drv_ops_impl_wimpdrv_activate.vad"
include {:verbatim} "../transition_constraints.s.dfy"
include {:verbatim} "../proof/wkapi_commutative_diagram.i.dfy"

// Fill the info of given wimp driver and activate the wimp driver 
// Input params on stack: (new_do_pend:paddr) at esp + 3 * ARCH_WORD_BYTES, 
// (new_do_pbase:word/uint32) at esp + 2 * ARCH_WORD_BYTES, (new_wimpdrv_pid:word/uint32) at esp + 1 * ARCH_WORD_BYTES, 
// (drv_id:word) at esp
// Return params on stack: (ret:word) at esp, (drv_slot:word) at esp + ARCH_WORD_BYTES
procedure WimpDrv_Activate()
    reads
        flags;
    modifies
        mem; globals; objects;
        eax; ebx; ecx; edx; esi; edi; esp; ebp;
    requires
        OpsSaneState(this);
    requires
        let stack_req_space :=
            7 * ARCH_WORD_BYTES +                    // For local variables
            11 * ARCH_WORD_BYTES +                   // For <_wimpdrv_activate_private>
            WK_STACK_FOR_EXTERNEL_FUNCS_SZ +
            4 * ARCH_WORD_BYTES;                     // For params of <_wimpdrv_activate_private>
        IsAddrInStack(esp - stack_req_space); // Stack must have free space
        let stack_params_space := 4 * ARCH_WORD_BYTES;
        IsAddrInStack(esp + stack_params_space - ARCH_WORD_BYTES); 
            // Stack space for function parameters
    requires
        let drv_id:word := stack_get_val(old(mem), old(esp));
        drv_id != WimpDrv_ID_RESERVED_EMPTY;
        this.subjects.wimp_drvs?[WimpDrv_IDWord_ToDrvID(this.subjects, this.objects, this.id_mappings, drv_id)];
            // Requirement: <drv_id> must exist in <wimp_drvs>
    requires
        let new_wimpdrv_idword:word := stack_get_val(old(mem), old(esp));
        let new_do_pbase:word := stack_get_val(old(mem), old(esp) + 2 * ARCH_WORD_BYTES);
        let new_do_pend:word := stack_get_val(old(mem), old(esp) + 3 * ARCH_WORD_BYTES);
        let drv_id:Drv_ID := WimpDrv_IDWord_ToDrvID(this.subjects, this.objects, this.id_mappings, new_wimpdrv_idword);

        WK_ValidPMemRegion(new_do_pbase, new_do_pend);
            // Requirement: new_do_pbase must <= new_do_pend
        wimpdrv_registration_info_must_exist(this.subjects, this.objects, this.id_mappings, this.objs_addrs, new_wimpdrv_idword, new_do_pbase, new_do_pend);
            // Requirement: When registering a wimp driver, The given information must match the information in <subjs>,  
            // <objs>, <id_mappings>, and <objs_addrs>, as they store all wimp drivers that will be activated in the system
    requires
        WSM_physical_EHCIs_must_be_inactive(this.subjects, this.activate_conds);
            // Requirement: physical EHCIs that map to ephemeral EHCIs must be inactive
    requires
        !interrupts_enabled(old(flags));
    ensures
        OpsSaneState(this);
        WSM_IsSecureOps(old(this), this);
    ensures
        is_valid_addr(old(esp) + 1 * ARCH_WORD_BYTES);
        is_valid_vaddr(old(esp) + 1 * ARCH_WORD_BYTES);
        is_valid_addr(old(esp) + 2 * ARCH_WORD_BYTES);
        is_valid_vaddr(old(esp) + 2 * ARCH_WORD_BYTES);
        is_valid_addr(old(esp) + 3 * ARCH_WORD_BYTES);
        is_valid_vaddr(old(esp) + 3 * ARCH_WORD_BYTES);
            // Properties needed by the following properites
    ensures
        let new_wimpdrv_idword:word := stack_get_val(old(mem), old(esp));
        let new_wimpdrv_pid:word := stack_get_val(old(mem), old(esp) + 1 * ARCH_WORD_BYTES);

        let ret:word := stack_get_val(mem, old(esp));
        let drv_slot:word := stack_get_val(mem, old(esp) + ARCH_WORD_BYTES);

        let dm := WSM_MapSecureState(old(this));
        let dm' := WSM_MapSecureState(this);

        WK_DrvActivateToGreenPartition_CommutativeDiagram_Property(old(this), dm, dm', new_wimpdrv_idword, new_wimpdrv_pid, ret);
            // Prove the commutative diagram
    ensures
        esp == old(esp); ebp == old(ebp); edi == old(edi); esi == old(esi);
        eax == old(eax); ebx == old(ebx); ecx == old(ecx); edx == old(edx); 
    ensures
        let stack_retval_space := 2 * ARCH_WORD_BYTES;
        stack_under_sp_is_unchanged(old(mem), mem, esp + stack_retval_space);   // Caller stacks are unchanged
    ensures
        is_flags_unchanged(old(flags), flags);
{
    WimpDrv_Activate_Impl();

    let s := old(this);
    let s' := this;

    // Immediate properties from <WK_EmptyPartitionCreate_Impl>
    assert InstSaneState(s');
    Lemma_IsAddrInStack_Property(old(esp), 4 * ARCH_WORD_BYTES - ARCH_WORD_BYTES, ARCH_WORD_BYTES);
    assert IsAddrInStack(old(esp) + ARCH_WORD_BYTES);

    // Prove OpsSaneStateSubset(s')
    reveal global_non_scratchpad_vars_are_unchanged;
    Lemma_WK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions_IfOSSubjsObjsAreUnchanged(s, s');
    Lemma_WK_OpsSaneStateSubset_Validity_LimitationOfUSBTDsVerification_IfUSBTDsAreUnchanged(s, s');
    Lemma_WK_OpsSaneStateSubset_Validity_USBTDsInRecordIsEitherEmptyOrSecure_IfUSBTDsAreUnchanged(s, s');
    assert OpsSaneStateSubset(s');

    // Prove commutative diagram
    let ret:word := stack_get_val(mem, old(esp));
    ghost if (ret == TRUE)
    {
        let new_wimpdrv_idword:word := stack_get_val(old(mem), old(esp));
        let new_wimpdrv_pid:word := stack_get_val(old(mem), old(esp) + 1 * ARCH_WORD_BYTES);
        let new_do_pbase:word := stack_get_val(old(mem), old(esp) + 2 * ARCH_WORD_BYTES);
        let new_do_pend:word := stack_get_val(old(mem), old(esp) + 3 * ARCH_WORD_BYTES);

        let ret:word := stack_get_val(mem, old(esp));
        let drv_slot:word := stack_get_val(mem, old(esp) + ARCH_WORD_BYTES);

        let dm := WSM_MapSecureState(s);
        Lemma_WimpDrv_Activate_ProveCommutativeDiagram(s, dm, drv_slot, new_wimpdrv_idword, new_wimpdrv_pid, new_do_pbase, new_do_pend, s');
        let dm' := WSM_MapSecureState(this);
        assert WK_DrvActivateToGreenPartition_CommutativeDiagram_Property(old(this), dm, dm', new_wimpdrv_idword, new_wimpdrv_pid, ret);
    }
    else
    {
        Lemma_WKAPI_ChangeTempGVars_MapToSameDMState(s, s');
        assert OpsSaneState(s);
        assert WSM_IsSecureOps(s, s');
    }
}

// Deactivate the given wimp driver
// Input params on stack: (drv_slot:word) at esp
// Return params on stack: (ret:word) at esp
procedure WimpDrv_Deactivate()
    reads
        flags;
    modifies
        mem; globals;
        eax; ebx; ecx; edx; esi; edi; esp; ebp;
    requires
        OpsSaneState(this);
    requires
        let stack_req_space :=
            7 * ARCH_WORD_BYTES +                    // For local variables
            WK_STACK_FOR_EXTERNEL_FUNCS_SZ +         // For <CALL_PMem_ReleaseFromWimps>
            FFI_PMem_ReleaseFromWimps_StackParamsWords * ARCH_WORD_BYTES;  // For params of <CALL_PMem_ReleaseFromWimps>
        IsAddrInStack(esp - stack_req_space); // Stack must have free space
        let stack_params_space := 1 * ARCH_WORD_BYTES;
        IsAddrInStack(esp + stack_params_space); 
            // Stack space for function parameters
    requires
        let drv_slot:word := stack_get_val(old(mem), old(esp));
        (   wimpdrv_valid_slot_id(drv_slot) &&
            pids_is_existing_wimp_pid(old(globals), wimpdrv_get_pid(old(globals), drv_slot).v)
        )
            ==> (
                let wimpdrv_idword := wimpdrv_get_id_word(old(globals), drv_slot) in
                let wimpdrv_id:Drv_ID := WimpDrv_IDWord_ToDrvID(this.subjects, this.objects, this.id_mappings, wimpdrv_idword) in
                this.subjects.wimp_drvs?[wimpdrv_id]
            );
            // Requirement: If the wimp driver is active in the record, then the corresponding <drv_id> must exist in 
            // <wimp_drvs>
            // [TODO][Issue 31] It is better to move this pre-condition into ValidState SIs
    requires
        WSM_physical_EHCIs_must_be_inactive(this.subjects, this.activate_conds);
            // Requirement: physical EHCIs that map to ephemeral EHCIs must be inactive
    requires
        !interrupts_enabled(old(flags));
    ensures
        OpsSaneState(this);
        WSM_IsSecureOps(old(this), this);
    ensures
        is_valid_addr(old(esp) + 1 * ARCH_WORD_BYTES);
        is_valid_vaddr(old(esp) + 1 * ARCH_WORD_BYTES);
            // Properties needed by the following properites
    ensures
        let drv_slot:word := stack_get_val(old(mem), old(esp));
        let ret:uint32 := stack_get_val(mem, old(esp));

        let dm := WSM_MapSecureState(old(this));
        let dm' := WSM_MapSecureState(this);

        WK_WimpDrv_Deactivate_CommutativeDiagram_Property(old(this), dm, dm', drv_slot, ret);
            // Prove the commutative diagram
    ensures
        esp == old(esp); ebp == old(ebp); edi == old(edi); esi == old(esi);
        eax == old(eax); ebx == old(ebx); ecx == old(ecx); edx == old(edx); 
    ensures
        let stack_retval_space := 1 * ARCH_WORD_BYTES;
        stack_under_sp_is_unchanged(old(mem), mem, esp + stack_retval_space);   // Caller stacks are unchanged
    ensures
        is_flags_unchanged(old(flags), flags);
        state_equal_except_mstate(old(this), this);
{
    WimpDrv_Deactivate_Impl();

    let s := old(this);
    let s' := this;

    // Immediate properties from <WK_EmptyPartitionCreate_Impl>
    assert InstSaneState(s');
    Lemma_IsAddrInStack_Property(old(esp), 1 * ARCH_WORD_BYTES, ARCH_WORD_BYTES);
    assert IsAddrInStack(old(esp) + ARCH_WORD_BYTES);

    // Prove OpsSaneStateSubset(s')
    reveal global_non_scratchpad_vars_are_unchanged;
    Lemma_WK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions_IfOSSubjsObjsAreUnchanged(s, s');
    Lemma_WK_OpsSaneStateSubset_Validity_LimitationOfUSBTDsVerification_IfUSBTDsAreUnchanged(s, s');
    Lemma_WK_OpsSaneStateSubset_Validity_USBTDsInRecordIsEitherEmptyOrSecure_IfUSBTDsAreUnchanged(s, s');
    assert OpsSaneStateSubset(s');

    // Prove commutative diagram
    let ret:word := stack_get_val(mem, old(esp));
    ghost if (ret == TRUE)
    {
        let drv_slot:word := stack_get_val(old(mem), old(esp));
        let ret:uint32 := stack_get_val(mem, old(esp));

        let dm := WSM_MapSecureState(s);
        Lemma_WimpDrv_Deactivate_ProveCommutativeDiagram(s, dm, drv_slot, s');
        let dm' := WSM_MapSecureState(this);
        assert WK_WimpDrv_Deactivate_CommutativeDiagram_Property(old(this), dm, dm', drv_slot, ret);
    }
    else
    {
        Lemma_WKAPI_ChangeTempGVars_MapToSameDMState(s, s');
        assert OpsSaneState(s);
        assert WSM_IsSecureOps(s, s');
    }
}