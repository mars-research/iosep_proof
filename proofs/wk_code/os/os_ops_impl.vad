include "../dev/usb2/usb_pdev_utils.vad"
include "../dev/usb2/eehci_info.vad"
include {:verbatim} "../state_properties.s.dfy"
include {:verbatim} "../proof/state_map_OpsSaneState.i.dfy"
include {:verbatim} "../state_properties_OpsSaneStateSubset.i.dfy"

/*********************** Public Methods ********************/
// Activate OS objects and related OS subjects, due to activating memory region [paddr_start, paddr_end). This
// operation just call mHV, which fulfill the goal of this operation by giving memory back to the OS partition. 
// [NOTE] "main memory" is the physical memory address space for processes (i.e., excluding MMIOs and relevant)
// Input params on stack: (paddr_end:word) at esp + ARCH_WORD_BYTES, (paddr_start:word) at esp
// Return on stack: (ret:word/uint32) at esp
procedure OS_Activate_MainMem_ByPAddr_Impl()
    reads
        flags; globals;
    modifies
        mem; subjects; objects; os_mem_active_map;
        eax; ebx; ecx; edx; esi; edi; esp; ebp;
    requires/ensures
        InstSaneState(this);
    requires
        let stack_req_space :=
            7 * ARCH_WORD_BYTES +                              // Local variables
            WK_STACK_FOR_EXTERNEL_FUNCS_SZ +                   // For <CALL_PMem_ActivateInOS>
            2 * ARCH_WORD_BYTES;                               // For params of <CALL_PMem_ActivateInOS>
        IsAddrInStack(esp - stack_req_space); // Stack must have free space
        let stack_params_space :=
            FFI_PMem_ActivateInOS_StackParamsWords * ARCH_WORD_BYTES;
        IsAddrInStack(esp + stack_params_space); 
            // Input param takes one word, output param takes four words, <stack_params_space> = max(input_params, 
            // output_params)
    requires
        ins_valid_pmem_activate_main_mem_in_os(old(this), old(esp));
    requires
        !interrupts_enabled(old(flags));
    ensures
        ffi_preserve_old_stack(old(this).wk_mstate, mem, FFI_PMem_ActivateInOS_ReturnWords); // Words for return parameters
        ffi_pmem_activate_main_mem_in_os_stack_and_statevars(old(this), mem, this.subjects, this.objects, this.os_mem_active_map);
            // Property: <pmem_activate_main_mem_in_os> activates the given memory region from the OS partition
    ensures
        esi == old(esi); edi == old(edi);
        eax == old(eax); ebx == old(ebx); ecx == old(ecx); edx == old(edx); 
        esp == old(esp); ebp == old(ebp);// temp registers are correctly restored
    ensures
        let stack_retval_space := FFI_PMem_ActivateInOS_ReturnWords * ARCH_WORD_BYTES;
        stack_under_sp_is_unchanged(old(mem), mem, esp + stack_retval_space);   // Caller stacks are unchanged
    ensures
        is_flags_unchanged(old(flags), flags);
{
    reveal ffi_preserve_old_stack;
    reveal ffi_pmem_activate_main_mem_in_os_stack_and_statevars;

    PUSH_OneReg(ebp);
    MOV_ToReg(ebp, esp);

    let paddr_end @= ecx;
    let paddr_start @= ebx;
    let ret @= eax;
    PUSH_Reg1ToReg6();


    Load(paddr_end, ebp, 2 * ARCH_WORD_BYTES);
    Load(paddr_start, ebp, ARCH_WORD_BYTES);

    PUSH(paddr_end);
    PUSH(paddr_start);
    CALL_PMem_ActivateInOS();
    Load(ret, esp, 0);
    Store(ebp, ARCH_WORD_BYTES, ret);
    POP_VOID(2 * ARCH_WORD_BYTES);


    POP_Reg1ToReg6();
    POP_OneReg(ebp);
}

// Deactivate all OS objects overlaps with the memory region [paddr_start, paddr_end), and related OS subjects. This
// operation just call mHV, which fulfill the goal of this operation by taking away memory from the OS partition. 
// [NOTE] "main memory" is the physical memory address space for processes (i.e., excluding MMIOs and relevant)
// Input params on stack: (paddr_end:word) at esp + ARCH_WORD_BYTES, (paddr_start:word) at esp
// Return on stack: None
procedure OS_Deactivate_MainMem_ByPAddr_Impl()
    reads
        flags; globals;
    modifies
        mem; subjects; objects; os_mem_active_map;
        eax; ebx; ecx; edx; esi; edi; esp; ebp;
    requires/ensures
        InstSaneState(this);
    requires
        let stack_req_space :=
            7 * ARCH_WORD_BYTES +                              // Local variables
            WK_STACK_FOR_EXTERNEL_FUNCS_SZ +                   // For <CALL_PMem_DeactivateFromOS>
            2 * ARCH_WORD_BYTES;                               // For params of <CALL_PMem_DeactivateFromOS>
        IsAddrInStack(esp - stack_req_space); // Stack must have free space
        let stack_params_space :=
            FFI_PMem_DeactivateFromOS_StackParamsWords * ARCH_WORD_BYTES;
        IsAddrInStack(esp + stack_params_space); 
            // Input param takes one word, output param takes four words, <stack_params_space> = max(input_params, 
            // output_params)
    requires
        ins_valid_pmem_deactivate_main_mem_from_os(old(this), old(esp));
    requires
        !interrupts_enabled(old(flags));
    ensures
        ffi_preserve_old_stack(old(this).wk_mstate, mem, FFI_PMem_DeactivateFromOS_ReturnWords); // Words for return parameters
        ffi_pmem_deactivate_main_mem_from_os_stack_and_statevars(old(this), mem, this.subjects, this.objects, this.os_mem_active_map);
            // Property: <pmem_deactivate_main_mem_from_os> deactivates the given memory region from the OS partition
    ensures
        esp == old(esp); ebp == old(ebp);
    ensures
        stack_under_sp_is_unchanged(old(mem), mem, esp);   // Caller stacks are unchanged
    ensures
        is_flags_unchanged(old(flags), flags);
{
    reveal ffi_preserve_old_stack;
    reveal ffi_pmem_deactivate_main_mem_from_os_stack_and_statevars;

    PUSH_OneReg(ebp);
    MOV_ToReg(ebp, esp);

    let paddr_end @= ecx;
    let paddr_start @= ebx;
    let ret @= eax;
    PUSH_Reg1ToReg6();


    Load(paddr_end, ebp, 2 * ARCH_WORD_BYTES);
    Load(paddr_start, ebp, ARCH_WORD_BYTES);

    PUSH(paddr_end);
    PUSH(paddr_start);
    CALL_PMem_DeactivateFromOS();
    POP_VOID(2 * ARCH_WORD_BYTES);


    POP_Reg1ToReg6();
    POP_OneReg(ebp);
}

// Activate all USBPDevs assigned to wimp partitions back to OS
// Input params on stack: None
// Return params on stack: (ret:word) at esp
// [NOTE] In the WK implementation spec, if a trace never calls this operation, then that trace still prevents object 
// reuse. This is because all traces must terminate before physical EHCIs are active in the OS partition, otherwise the
// set of device IDs is modified. However, after physical EHCIs are active, wimp drivers data in USBPDevs could be  
// reused by OS/Apps if this operation is not called before hand. 
// [NOTE] Needs 150s to verify
procedure OS_Activate_AllReleasedPEHCIsAndUSBPDevs_Impl() {:timeLimitMultiplier 20}
    reads
        globals; flags;
    modifies
        mem; objects; subjects;
        eax; ebx; ecx; edx; esi; edi; esp; ebp;               // Local variables
    requires
        OpsSaneState(this);
    requires
        let stack_req_space := 
            3 * ARCH_WORD_BYTES +                    // For local variables
            WK_STACK_FOR_EXTERNEL_FUNCS_SZ +         // For <CALL_USBPDev_Clear>
            15 * ARCH_WORD_BYTES;                    
        IsAddrInStack(esp - stack_req_space); // Stack must have free space for two words
        let stack_params_space :=
            1 * ARCH_WORD_BYTES;
        IsAddrInStack(esp + stack_params_space);
            // The params of the function must be on stack
    requires 
        !interrupts_enabled(old(flags));
    ensures
        let ret:word := stack_get_val(mem, old(esp));
        let all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(old(globals));
        let empty_addr := UInt64_FromTwoUInt32s(WimpUSBPDev_ADDR_EMPTY_HIGH, WimpUSBPDev_ADDR_EMPTY_LOW);

        (ret == TRUE) ==> usb_is_usbpdev_addr_valid(empty_addr);
        (ret == TRUE) ==> (forall (addr:USBPDev_Addr) (all_non_empty_addrs?[addr])
                            ==> (
                                    let dev_id := Map_USBPDevAddr_ToDevID(old(this).subjects, old(this).objects, old(this).id_mappings, addr) in
                                    old(this).subjects.usbpdevs?[dev_id]
                                )
        );
            // Properties needed by the property below
    ensures
        forall (dev_id:Dev_ID) (old(this).activate_conds.ehci_activate_cond?[dev_id]
                ==> old(this).subjects.os_devs?[dev_id]);
            // Property needed by the properties below
    ensures
        let ret:word := stack_get_val(mem, old(esp));
        let all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(old(globals));
        
        (ret == TRUE) ==> (
            forall (i:word) (eehci_valid_slot_id(i)
                    ==> eehci_info_get_pid(old(globals), i) == WS_PartitionID(PID_INVALID))
        );
        (ret == TRUE) ==> (
            forall (i:word) (usbpdev_valid_slot_id(i)
                    ==> usbpdev_get_pid(old(globals), i) == WS_PartitionID(PID_INVALID))
        );
            // Property 1: No eEHCI or USBPDev is active
        (ret == TRUE) ==> P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE(old(this), this, all_non_empty_addrs);
            // Property 2: For all non-empty USBPDev addresses stored in <g_wimpdevs_devlist>, clear their objects
        (ret != TRUE) ==> global_non_scratchpad_vars_are_unchanged(old(globals), globals);
        (ret != TRUE) ==> state_equal_except_mstate(old(this), this);
            // Property 3: If return false, then non scratch-pad global variables and state variables other than 
            // <wk_mstate> are unchanged
    ensures
        OpsSaneStateSubset(this);
    ensures
        esi == old(esi); edi == old(edi);
        eax == old(eax); ebx == old(ebx); ecx == old(ecx); edx == old(edx); 
        esp == old(esp); ebp == old(ebp);// temp registers are correctly restored
    ensures
        let stack_retval_space := 1 * ARCH_WORD_BYTES;
        stack_under_sp_is_unchanged(old(mem), mem, esp + stack_retval_space);   // Caller stacks are unchanged
        globals == old(globals);
    ensures
        is_flags_unchanged(old(flags), flags);
{
    PUSH_OneReg(ebp);
    MOV_ToReg(ebp, esp);

    let pid @= eax;
    let ret @= ecx;
    PUSH_TwoRegs(pid, ret);
    let orig_esp := esp;


    // Prove the properties needed by the main properites in this operation
    Lemma_WK_ValidState_DevsActivateCond_Property(old(this));

    // Step 1. Check no USBPDev is active
    PUSH_VOID(1 * ARCH_WORD_BYTES);
    PUSH(const(PID_INVALID));
    eehci_find_slot_not_in_partition();
    Load(ret, esp, 0);
    POP_VOID(2 * ARCH_WORD_BYTES);

    if(ret == const(FALSE))
    {
        // Step 2. Check no USBPDev is active
        PUSH_VOID(1 * ARCH_WORD_BYTES);
        PUSH(const(PID_INVALID));
        usbpdev_find_slot_not_in_partition();
        Load(ret, esp, 0);
        POP_VOID(2 * ARCH_WORD_BYTES);

        if(ret == const(FALSE))
        {
            let this1 := this;

            // Step 3. Clear USBPDevs' objects
            usbpdevlist_clear_all_devices();
            let this2 := this;

            //// Prove usbpdev_clear_multi_non_mstate_relationship(old(this), this2, all_non_empty_addrs)
            Lemma_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_PropertiesOfusbpdevlist_clear_all_devices(old(this), this1, this2);
            let all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(old(globals));
            assert usbpdev_clear_multi_non_mstate_relationship(old(this), this2, all_non_empty_addrs);

            // Step 4. Set USBPDevs' partition ID to be the OS partition ID
            // [NOTE] This step is automatic. This is because once physical EHCIs are returned to the OS partition, then 
            // the connected USBPDevs are also in the OS partition in fact, no matter what paritition ID recorded in WK.
            AXIOM_Assign_USBPDevs_To_OS_Partition();
            let this3 := this;

            reveal usbpdev_clear_multi_non_mstate_relationship;
            reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ForClearUSBPDevs;
            reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToUSBPDevsOnly;
            assert P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ForClearUSBPDevs(old(this), this3, all_non_empty_addrs);

            // Step 5. Activate and clear pEHCIs
            PUSH_Reg1ToReg6();
            let this4 := this;
            assert P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ForClearUSBPDevs(old(this), this4, all_non_empty_addrs);
            CALL_PEHCI_ActivateInOS();
            assert IsAddrInStack(esp - ARCH_WORD_BYTES);
            assert ffi_pehci_activate_in_os_stack_and_statevars(this4, this.subjects, this.objects);
            assert esp == orig_esp - 6 * ARCH_WORD_BYTES;
            POP_Reg1ToReg6();

            Store(ebp, ARCH_WORD_BYTES, const(TRUE));

            POP_TwoRegs(pid, ret);
            POP_OneReg(ebp);

            Lemma_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ProveP_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE(
                old(this), this4, this, all_non_empty_addrs);
            assert P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE(old(this), this, all_non_empty_addrs);

            //// Prove WK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions()
            Lemma_P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ProveWK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions(
                old(this), this);
            assert WK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions(this.subjects, this.objects, this.id_mappings, globals);
        }
        else
        {
            Store(ebp, ARCH_WORD_BYTES, const(FALSE));

            assert globals == old(globals);
            Lemma_global_non_scratchpad_vars_are_unchanged_ProveIfGlobalVarsAreEqual(old(globals), globals);

            POP_TwoRegs(pid, ret);
            POP_OneReg(ebp);
        }
    }
    else
    {
        Store(ebp, ARCH_WORD_BYTES, const(FALSE));

        assert globals == old(globals);
        Lemma_global_non_scratchpad_vars_are_unchanged_ProveIfGlobalVarsAreEqual(old(globals), globals);

        POP_TwoRegs(pid, ret);
        POP_OneReg(ebp);
    }


    // Prove OpsSaneState(this)
    reveal WK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions;
    Lemma_OpsSaneStateSubset_HoldIfUSBTDsAreUnchanged(old(this), this);
}




/*********************** Predicates ********************/
#verbatim
// Additional Pre-condition of <OS_Deactivate_MainMem_ByPAddr>: No red device defines transfer to os_tds/fds/dos
predicate P_OS_Deactivate_MainMem_ByPAddr_AdditonalPreConditions(
    s:state, dm:DM_State, 
    paddr_start:word, paddr_end:word
)
    requires OpsSaneState(s)
    requires dm == WSM_MapSecureState(s)

    requires WK_ValidPMemRegion(paddr_start, paddr_end)
        // Properties specific to OS_Activate_MainMem_ByPAddr
{
    var result := os_external_objs_to_be_deactivated(s.subjects, s.objects, s.os_mem_active_map, paddr_start, paddr_end);
    var os_tds := result.1;
    var os_fds := result.2;
    var os_dos := result.3;

    var properties_to_prove := (os_tds <= AllTDIDs(dm.objects)) &&
            (os_fds <= AllFDIDs(dm.objects)) &&
            (os_dos <= AllDOIDs(dm.objects)) &&

            (forall id :: id in os_tds
                    ==> DM_ObjPID(dm.objects, id.oid) == dm.red_pid) &&
            (forall id :: id in os_fds
                    ==> DM_ObjPID(dm.objects, id.oid) == dm.red_pid) &&
            (forall id :: id in os_dos
                    ==> DM_ObjPID(dm.objects, id.oid) == dm.red_pid);

    (properties_to_prove ==> P_RedDevsHaveNoTransferToGivenRedObjsAtAnyTime(dm, os_tds, os_fds, os_dos))
}
#endverbatim




/*********************** Private Predicates For <OS_Activate_AllReleasedPEHCIsAndUSBPDevs> ********************/
#verbatim
// Predicate: Properties of OS_Activate_AllReleasedPEHCIsAndUSBPDevs When returning TRUE
predicate {:opaque} P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE(s1:state, s2:state, addrs:set<USBPDev_Addr>)
    requires WK_ValidSubjs_SubjIDs(s1.subjects)
    requires WK_ValidObjs(s1.subjects, s1.objects)
    requires WK_ValidIDMappings(s1.subjects, s1.objects, s1.id_mappings)

    requires forall dev_id :: dev_id in s1.activate_conds.ehci_activate_cond
                ==> dev_id in s1.subjects.os_devs
        // Requirement from <WK_ValidState_DevsActivateCond>

    requires var empty_addr := UInt64_FromTwoUInt32s(WimpUSBPDev_ADDR_EMPTY_HIGH, WimpUSBPDev_ADDR_EMPTY_LOW);
             usb_is_usbpdev_addr_valid(empty_addr) &&
             (forall addr :: addr in addrs
                ==> addr != usb_parse_usbpdev_addr(empty_addr))
        // Requirement: The USBPDev must be located at a non-empty address
    requires forall addr :: addr in addrs
                ==> Map_USBPDevAddr_ToDevID(s1.subjects, s1.objects, s1.id_mappings, addr) in s1.subjects.usbpdevs
{
    var t := usbpdev_addrs_to_subjs_fds_dos_ids(s1, addrs);
    var usbpdev_ids:set<Dev_ID> := t.0;
    var usbpdev_fd_ids:set<FD_ID> := t.1;
    var usbpdev_do_ids:set<DO_ID> := t.2;

    // Immutable state variables
    s1.objs_addrs == s2.objs_addrs &&
    s1.id_mappings == s2.id_mappings &&
    s1.activate_conds == s2.activate_conds &&
    s1.ok == s2.ok &&

    // Other subjects are unchanged
    s2.subjects.wimp_drvs == s1.subjects.wimp_drvs &&
    s2.subjects.eehcis == s1.subjects.eehcis &&
    s2.subjects.os_drvs == s1.subjects.os_drvs &&

    // Other objects are unchanged
    s1.objects.eehci_hcoded_tds == s2.objects.eehci_hcoded_tds &&
    s1.objects.eehci_other_tds == s2.objects.eehci_other_tds &&
    s1.objects.eehci_fds == s2.objects.eehci_fds &&
    s1.objects.eehci_dos == s2.objects.eehci_dos &&
    s1.objects.usbtd_tds == s2.objects.usbtd_tds &&
    s1.objects.usbtd_fds == s2.objects.usbtd_fds &&
    s1.objects.usbtd_dos == s2.objects.usbtd_dos &&
    s1.objects.wimpdrv_dos == s2.objects.wimpdrv_dos &&

    P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToPEHCIsOnly(s1, s2) &&
    P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToUSBPDevsOnly(s1, s2, addrs) &&

    (true)
}

// Predicate: Properties of OS_Activate_AllReleasedPEHCIsAndUSBPDevs's modifications to USBPDevs When returning TRUE
predicate {:opaque} P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ForClearUSBPDevs(s1:state, s2:state, addrs:set<USBPDev_Addr>)
    requires WK_ValidSubjs_SubjIDs(s1.subjects)
    requires WK_ValidObjs(s1.subjects, s1.objects)
    requires WK_ValidIDMappings(s1.subjects, s1.objects, s1.id_mappings)

    requires var empty_addr := UInt64_FromTwoUInt32s(WimpUSBPDev_ADDR_EMPTY_HIGH, WimpUSBPDev_ADDR_EMPTY_LOW);
             usb_is_usbpdev_addr_valid(empty_addr) &&
             (forall addr :: addr in addrs
                ==> addr != usb_parse_usbpdev_addr(empty_addr))
        // Requirement: The USBPDev must be located at a non-empty address
    requires forall addr :: addr in addrs
                ==> Map_USBPDevAddr_ToDevID(s1.subjects, s1.objects, s1.id_mappings, addr) in s1.subjects.usbpdevs
{
    var t := usbpdev_addrs_to_subjs_fds_dos_ids(s1, addrs);
    var usbpdev_ids:set<Dev_ID> := t.0;
    var usbpdev_fd_ids:set<FD_ID> := t.1;
    var usbpdev_do_ids:set<DO_ID> := t.2;

    // Immutable state variables
    s1.objs_addrs == s2.objs_addrs &&
    s1.id_mappings == s2.id_mappings &&
    s1.activate_conds == s2.activate_conds &&
    s1.ok == s2.ok &&

    // Other subjects are unchanged
    s2.subjects.wimp_drvs == s1.subjects.wimp_drvs &&
    s2.subjects.eehcis == s1.subjects.eehcis &&
    s2.subjects.os_drvs == s1.subjects.os_drvs &&
    s2.subjects.os_devs == s1.subjects.os_devs &&

    // Other objects are unchanged
    s1.objects.os_tds == s2.objects.os_tds &&
    s1.objects.os_fds == s2.objects.os_fds &&
    s1.objects.os_dos == s2.objects.os_dos &&
    s1.objects.eehci_hcoded_tds == s2.objects.eehci_hcoded_tds &&
    s1.objects.eehci_other_tds == s2.objects.eehci_other_tds &&
    s1.objects.eehci_fds == s2.objects.eehci_fds &&
    s1.objects.eehci_dos == s2.objects.eehci_dos &&
    s1.objects.usbtd_tds == s2.objects.usbtd_tds &&
    s1.objects.usbtd_fds == s2.objects.usbtd_fds &&
    s1.objects.usbtd_dos == s2.objects.usbtd_dos &&
    s1.objects.wimpdrv_dos == s2.objects.wimpdrv_dos &&

    P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToUSBPDevsOnly(s1, s2, addrs) &&

    (true)
}

// Predicate: Properties of OS_Activate_AllReleasedPEHCIsAndUSBPDevs's modifications to PEHCIs' subjects and objects
predicate {:opaque} P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToPEHCIsOnly(s1:state, s2:state)
    requires WK_ValidSubjs_SubjIDs(s1.subjects)
    requires WK_ValidObjs(s1.subjects, s1.objects)
    requires forall dev_id :: dev_id in s1.activate_conds.ehci_activate_cond
                ==> dev_id in s1.subjects.os_devs
        // Requirement from <WK_ValidState_DevsActivateCond>
{
    var pehci_ids := WSM_AllDevIDs_pEHCIs(s1.subjects, s1.activate_conds);
    var pehci_hcoded_td_ids := WSM_HCodedTDsOwnedByOSDevs(s1, pehci_ids);
    var pehci_td_ids := WSM_TDsOwnedByOSDevs(s1, pehci_ids);
    var pehci_fd_ids := WSM_FDsOwnedByOSDevs(s1, pehci_ids);
    var pehci_do_ids := WSM_DOsOwnedByOSDevs(s1, pehci_ids);

    reveal WK_ValidObjs();
    reveal WK_ValidObjs_ObjInSubjsMustBeInState();
    assert forall id:: id in pehci_hcoded_td_ids ==> id in s1.objects.os_tds;
    assert forall id:: id in pehci_td_ids ==> id in s1.objects.os_tds;
    assert forall id:: id in pehci_fd_ids ==> id in s1.objects.os_fds;
    assert forall id:: id in pehci_do_ids ==> id in s1.objects.os_dos;

    //// Subjects modification due to PEHCIs activation
    (forall id :: id in s1.subjects.os_devs <==> id in s2.subjects.os_devs) &&
    (forall id :: id in s1.subjects.os_devs && id !in pehci_ids
        ==> s2.subjects.os_devs[id] == s1.subjects.os_devs[id]
            // Other OS devices are unchanged
    ) &&
    (forall id :: id in pehci_ids
        ==> (s2.subjects.os_devs[id].hcoded_td_id == s1.subjects.os_devs[id].hcoded_td_id &&
                s2.subjects.os_devs[id].td_ids == s1.subjects.os_devs[id].td_ids &&
                s2.subjects.os_devs[id].fd_ids == s1.subjects.os_devs[id].fd_ids &&
                s2.subjects.os_devs[id].do_ids == s1.subjects.os_devs[id].do_ids &&
                s2.subjects.os_devs[id].pid == WS_PartitionID(PID_RESERVED_OS_PARTITION)
            )
            // All PEHCIs are moved to the OS partition
    ) &&

    // PEHCIs are activated in the OS partition
    (
        var to_clear_objs := pehci_td_ids - pehci_hcoded_td_ids;

        // Clear the objects being activated (i.e., ClearObjs)
        var temp_tds := WSM_ClearOSTDs(s1.objects.os_tds, to_clear_objs);
        var temp_fds := WSM_ClearOSFDs(s1.objects.os_fds, pehci_fd_ids);
        var temp_dos := WSM_ClearOSDOs(s1.objects.os_dos, pehci_do_ids);

        // Modify the PID of these objects (i.e., SetPbjsPIDs)
        var os_tds' := WSM_SetOSTDsPIDs(temp_tds, pehci_td_ids, WS_PartitionID(PID_RESERVED_OS_PARTITION));
        var os_fds' := WSM_SetOSFDsPIDs(temp_fds, pehci_fd_ids, WS_PartitionID(PID_RESERVED_OS_PARTITION));
        var os_dos' := WSM_SetOSDOsPIDs(temp_dos, pehci_do_ids, WS_PartitionID(PID_RESERVED_OS_PARTITION));

        s2.objects.os_tds == os_tds' &&
        s2.objects.os_fds == os_fds' &&
        s2.objects.os_dos == os_dos'
    ) &&

    (true)
}

// Predicate: Properties of OS_Activate_AllReleasedPEHCIsAndUSBPDevs's modifications to USBPDevs' subjects and objects
predicate {:opaque} P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToUSBPDevsOnly(s1:state, s2:state, addrs:set<USBPDev_Addr>)
    requires WK_ValidSubjs_SubjIDs(s1.subjects)
    requires WK_ValidObjs(s1.subjects, s1.objects)
    requires WK_ValidIDMappings(s1.subjects, s1.objects, s1.id_mappings)

    requires var empty_addr := UInt64_FromTwoUInt32s(WimpUSBPDev_ADDR_EMPTY_HIGH, WimpUSBPDev_ADDR_EMPTY_LOW);
             usb_is_usbpdev_addr_valid(empty_addr) &&
             (forall addr :: addr in addrs
                ==> addr != usb_parse_usbpdev_addr(empty_addr))
        // Requirement: The USBPDev must be located at a non-empty address
    requires forall addr :: addr in addrs
                ==> Map_USBPDevAddr_ToDevID(s1.subjects, s1.objects, s1.id_mappings, addr) in s1.subjects.usbpdevs
{
    var t := usbpdev_addrs_to_subjs_fds_dos_ids(s1, addrs);
    var usbpdev_ids:set<Dev_ID> := t.0;
    var usbpdev_fd_ids:set<FD_ID> := t.1;
    var usbpdev_do_ids:set<DO_ID> := t.2;

    // Correct modifications to subjects
    MapGetKeys(s2.subjects.usbpdevs) == MapGetKeys(s1.subjects.usbpdevs) &&
    (forall id :: id in s1.subjects.usbpdevs
                ==> s2.subjects.usbpdevs[id].hcoded_td_id == s1.subjects.usbpdevs[id].hcoded_td_id &&
                    s2.subjects.usbpdevs[id].fd_ids == s1.subjects.usbpdevs[id].fd_ids &&
                    s2.subjects.usbpdevs[id].do_ids == s1.subjects.usbpdevs[id].do_ids) &&
    (forall id :: id in s1.subjects.usbpdevs
                ==> s2.subjects.usbpdevs[id].active_in_os == true) &&

    // Correct modifications to objects
    s1.objects.usbpdev_tds == s2.objects.usbpdev_tds &&

    // In <usbpdev_fds>, clear the contents of the USBPDev's FDs only
    MapGetKeys(s1.objects.usbpdev_fds) == MapGetKeys(s2.objects.usbpdev_fds) &&
    (
        forall id :: id in s1.objects.usbpdev_fds
            ==> (id in usbpdev_fd_ids ==> WSM_IsFDClearVal(s2.objects.usbpdev_fds, id)) &&
                (id !in usbpdev_fd_ids ==> s1.objects.usbpdev_fds[id] == s2.objects.usbpdev_fds[id])
    ) &&

    // In <usbpdev_dos>, clear the contents of the USBPDev's DOs only
    MapGetKeys(s1.objects.usbpdev_dos) == MapGetKeys(s2.objects.usbpdev_dos) &&
    (
        forall id :: id in s1.objects.usbpdev_dos
            ==> (id in usbpdev_do_ids ==> WSM_IsDOClearVal(s2.objects.usbpdev_dos, id)) &&
                (id !in usbpdev_do_ids ==> s1.objects.usbpdev_dos[id] == s2.objects.usbpdev_dos[id])
    ) &&

    (true)
}
#endverbatim




/*********************** Private Lemmas For <OS_Activate_AllReleasedPEHCIsAndUSBPDevs> ********************/
#verbatim
lemma Lemma_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_PropertiesOfusbpdevlist_clear_all_devices(old_s:state, s1:state, s2:state)
    requires WK_ValidGlobalVars_Decls(wkm_get_globals(old_s.wk_mstate))
    requires P_WimpUSBPDev_ValidGlobalVarValues_Addrs(wkm_get_globals(old_s.wk_mstate))
    requires WK_ValidSubjs_SubjIDs(old_s.subjects)
    requires WK_ValidObjs(old_s.subjects, old_s.objects)
    requires WK_ValidIDMappings(old_s.subjects, old_s.objects, old_s.id_mappings)
    requires var empty_addr := UInt64_FromTwoUInt32s(WimpUSBPDev_ADDR_EMPTY_HIGH, WimpUSBPDev_ADDR_EMPTY_LOW);
             var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(old_s.wk_mstate));
             usb_is_usbpdev_addr_valid(empty_addr) &&
             (forall addr :: addr in all_non_empty_addrs
                ==> addr != usb_parse_usbpdev_addr(empty_addr))
        // Requirement: The USBPDev must be located at a non-empty address
    requires var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(old_s.wk_mstate));
             forall addr :: addr in all_non_empty_addrs
                ==> Map_USBPDevAddr_ToDevID(old_s.subjects, old_s.objects, old_s.id_mappings, addr) in old_s.subjects.usbpdevs

    requires wkm_get_globals(s1.wk_mstate) == wkm_get_globals(old_s.wk_mstate)
    requires state_equal_except_mstate(s1, old_s)
        // Property between old_s and s1

    requires var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(s1.wk_mstate));
             usbpdev_clear_multi_non_mstate_relationship(s1, s2, all_non_empty_addrs);
        // Property between s1 and s2

    ensures var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(old_s.wk_mstate));
             usbpdev_clear_multi_non_mstate_relationship(old_s, s2, all_non_empty_addrs);
{
    reveal usbpdev_clear_multi_non_mstate_relationship();

    // Prove usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(s1.wk_mstate)) == usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(old_s.wk_mstate));
    assert usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(s1.wk_mstate)) ==
            usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(old_s.wk_mstate));

    // Prove usbpdev_addrs_to_subjs_fds_dos_ids(old_s, all_non_empty_addrs) == usbpdev_addrs_to_subjs_fds_dos_ids(s1, all_non_empty_addrs)
    var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(s1.wk_mstate)); 
    assert usbpdev_addrs_to_subjs_fds_dos_ids(old_s, all_non_empty_addrs) == usbpdev_addrs_to_subjs_fds_dos_ids(s1, all_non_empty_addrs);

    // Prove the post-condition
    var t := usbpdev_addrs_to_subjs_fds_dos_ids(old_s, all_non_empty_addrs);
    var usbpdev_ids:set<Dev_ID> := t.0;
    var usbpdev_fd_ids:set<FD_ID> := t.1;
    var usbpdev_do_ids:set<DO_ID> := t.2;

    forall id | id in old_s.objects.usbpdev_fds
        ensures (id in usbpdev_fd_ids ==> WSM_IsFDClearVal(s2.objects.usbpdev_fds, id)) &&
                (id !in usbpdev_fd_ids ==> old_s.objects.usbpdev_fds[id] == s2.objects.usbpdev_fds[id])
    {
        assert (id in usbpdev_fd_ids ==> WSM_IsFDClearVal(s2.objects.usbpdev_fds, id)) &&
                (id !in usbpdev_fd_ids ==> old_s.objects.usbpdev_fds[id] == s2.objects.usbpdev_fds[id]);
    }

    forall id | id in old_s.objects.usbpdev_dos
        ensures (id in usbpdev_do_ids ==> WSM_IsDOClearVal(s2.objects.usbpdev_dos, id)) &&
                (id !in usbpdev_do_ids ==> old_s.objects.usbpdev_dos[id] == s2.objects.usbpdev_dos[id])
    {
        assert (id in usbpdev_do_ids ==> WSM_IsDOClearVal(s2.objects.usbpdev_dos, id)) &&
                (id !in usbpdev_do_ids ==> old_s.objects.usbpdev_dos[id] == s2.objects.usbpdev_dos[id]);
    }
}

lemma Lemma_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ProveP_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE(
    old_s:state, s1:state, s2:state, addrs:set<USBPDev_Addr>
)
    requires WK_ValidSubjs_SubjIDs(old_s.subjects)
    requires WK_ValidObjs(old_s.subjects, old_s.objects)
    requires WK_ValidIDMappings(old_s.subjects, old_s.objects, old_s.id_mappings)

    requires var empty_addr := UInt64_FromTwoUInt32s(WimpUSBPDev_ADDR_EMPTY_HIGH, WimpUSBPDev_ADDR_EMPTY_LOW);
             usb_is_usbpdev_addr_valid(empty_addr) &&
             (forall addr :: addr in addrs
                ==> addr != usb_parse_usbpdev_addr(empty_addr))
    requires forall addr :: addr in addrs
                ==> Map_USBPDevAddr_ToDevID(old_s.subjects, old_s.objects, old_s.id_mappings, addr) in old_s.subjects.usbpdevs
        // Requirements for P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ForClearUSBPDevs
    requires ValidState(s1)
    requires var old_esp := x86_get_reg(s1.wk_mstate, ESP);
             var stack_params_space := FFI_PEHCI_ActivateInOS_StackParamsWords * ARCH_WORD_BYTES;
             IsAddrInStack(old_esp + stack_params_space - ARCH_WORD_BYTES); 
    requires var s_wkm := s1.wk_mstate;
             var old_esp := x86_get_reg(s_wkm, ESP); 
             ins_valid_pEHCI_ActivateInOS(s1, old_esp)
    requires s1.objs_addrs == s2.objs_addrs &&
            s1.id_mappings == s2.id_mappings &&
            s1.activate_conds == s2.activate_conds &&
            s1.ok == s2.ok
        // Requirements for ffi_pehci_activate_in_os_stack_and_statevars
    requires forall dev_id :: dev_id in old_s.activate_conds.ehci_activate_cond
                ==> dev_id in old_s.subjects.os_devs
        // Requirements for P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE

    requires P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ForClearUSBPDevs(old_s, s1, addrs)
    requires ffi_pehci_activate_in_os_stack_and_statevars(s1, s2.subjects, s2.objects)

    ensures P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE(old_s, s2, addrs)
{
    reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToPEHCIsOnly();
    reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToUSBPDevsOnly();
    reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ForClearUSBPDevs();
    reveal ffi_pehci_activate_in_os_stack_and_statevars();
    reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE();


    // Immutable state variables
    assert old_s.objs_addrs == s2.objs_addrs &&
    old_s.id_mappings == s2.id_mappings &&
    old_s.activate_conds == s2.activate_conds &&
    old_s.ok == s2.ok &&

    // Other subjects are unchanged
    s2.subjects.wimp_drvs == old_s.subjects.wimp_drvs &&
    s2.subjects.eehcis == old_s.subjects.eehcis &&
    s2.subjects.os_drvs == old_s.subjects.os_drvs &&

    // Other objects are unchanged
    old_s.objects.eehci_hcoded_tds == s2.objects.eehci_hcoded_tds &&
    old_s.objects.eehci_other_tds == s2.objects.eehci_other_tds &&
    old_s.objects.eehci_fds == s2.objects.eehci_fds &&
    old_s.objects.eehci_dos == s2.objects.eehci_dos &&
    old_s.objects.usbtd_tds == s2.objects.usbtd_tds &&
    old_s.objects.usbtd_fds == s2.objects.usbtd_fds &&
    old_s.objects.usbtd_dos == s2.objects.usbtd_dos &&
    old_s.objects.wimpdrv_dos == s2.objects.wimpdrv_dos &&

    P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToPEHCIsOnly(old_s, s2) &&
    P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToUSBPDevsOnly(old_s, s2, addrs);
}

lemma Lemma_P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE_ProveWK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions(
    s:state, s':state
)
    requires OpsSaneStateSubset(s)
    requires InstSaneState(s')

    requires forall dev_id :: dev_id in s.activate_conds.ehci_activate_cond
                ==> dev_id in s.subjects.os_devs
        // Requirement from <WK_ValidState_DevsActivateCond>

    requires var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(s.wk_mstate));
             var empty_addr := UInt64_FromTwoUInt32s(WimpUSBPDev_ADDR_EMPTY_HIGH, WimpUSBPDev_ADDR_EMPTY_LOW);
             usb_is_usbpdev_addr_valid(empty_addr) &&
             (forall addr :: addr in all_non_empty_addrs
                ==> addr != usb_parse_usbpdev_addr(empty_addr))
        // Requirement: The USBPDev must be located at a non-empty address
    requires var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(s.wk_mstate));
             forall addr :: addr in all_non_empty_addrs
                ==> Map_USBPDevAddr_ToDevID(s.subjects, s.objects, s.id_mappings, addr) in s.subjects.usbpdevs

    requires var all_non_empty_addrs := usbpdevlist_get_all_non_empty_addrs(wkm_get_globals(s.wk_mstate));
             P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE(s, s', all_non_empty_addrs)
        // Requirement: Properties of <usbpdevlist_clear_all_devices>
    
    ensures WK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions(s'.subjects, s'.objects, s'.id_mappings, wkm_get_globals(s'.wk_mstate))
{
    reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_WhenReturnTRUE();
    reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToPEHCIsOnly();
    reveal P_OS_Activate_AllReleasedPEHCIsAndUSBPDevs_ModificationsToUSBPDevsOnly();
    reveal WK_OpsSaneStateSubset_Validity_OSObjsCannotBeActiveInWimpPartitions();
}
#endverbatim